x1 <- x0/2
if (abs(x1 -x0) < tol) {
break
} else {
x0 <- x1
print(x0)
}
}
names1 <- c("Dave", "John", "Ann", "Roger", "Bill", "Kathy")
f.names.repeat <- function(x)  {
i <- 1
repeat {
print(x[i])
i <- i+1
if(x[i] == "Roger") break
}
}
f.names.repeat(names1)
for (i in 1:100) {
if (i <= 20) next
print(i)
}
sd
str(sd)
myplot <- function(x,y,type = "l",...) {
plot(x,y,type = type,...)
}
x <- 1:4
y <- 1:4
myplot(x,y)
plot(x,y)
myplot(x,y)
rand(1:4)
?random
rbinom(10,1,.5)
rbinom(10,10,.5)
rbinom(10,10,5)
rbinom(10,10,1)
rbinom(10,10,.9)
rbinom(10,10,.5)
x <- 1:10
y <- rbinom(10,10,.5)
plot(x,y)
myplot(x,y)
?paste
paste0("my,"name","is","William")
paste0("my","name","is","William")
search()
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power
str(make.power)
cube <- make.power(3)
str(cube)
cube
cube(2)
cube(5)
square <- make.power(2)
square(2)
cube(5)
ls(environment(cube))
get('n', environment(cube))
ls(environment(square))
get('n', environment(square))
make.NegLogLik <- function(data, fixed = c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5 * length(data) * log(2*pi*sigma^2)
b <- -0.5 * sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
make.NegLogLik
rnorm(100,1,2)
set.seed(1)
normals <- rnorm(100,1,2)
plot(normals)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu = 0, sigma = 1), nLL)$par
nLL <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL, c(-1, 3), nLL)$minimum
optimize(nLL, c(-1, 3))$minimum
nLL <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL, c(1e-6, 10))$minimum
nLL <- make.NegLogLik(normals, c(1,FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "1")
plot(x, exp(-(y-min(y))), type = "l")
plot(x, exp(-(y-min(y))), type = "c")
plot(x, exp(-(y-min(y))))
nLL <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL, c(-1, 3))$minimum
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))))
x <- list(a = 1:5, b = rnorm(10))
lapply(x,mean)
x <- 1:4
lapply(x,runif)
lapply(x,runif, min = 0, max = 10)
x <- list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
lapply(x,function(m) m[,1])
rnorm(100)
plot(y)
y <- rnorm(100)
plot(y)
y <- runif(100)
plot(y)
y <- rpois(100)
y <- rpois(100,1)
plot(y)
x <- list(rnorm(100), runif(100), rpois(100,1))
sapply(x, quantile, probs = c(0.25, 0.75))
x <- matrix(rnorm(200),10,20)
apply(x,2,mean)
apply(x,1,mean)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,mean)
rowSums(x)
x <- matrix(rnorm(200),20,10)
apply(x, quantile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
c(rnorm(100), runif(100), rpois(100,1))
x <- c(rnorm(10), runif(10), rpois(10,1))
f <- gl(3,10)
tapply (x, f ,mean)
x <- c(rnorm(10), runif(10), rpois(10,1))
f <- gl(3,10)
tapply (x, f ,mean)
tapply (x, f ,mean, summarize = F)
tapply (x, f ,mean, simplify = F)
tapply (x, f ,range, simplify = F)
tapply (x, f ,range, simplify = T)
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind"), rm.na = T]))
lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], rm.na = T))
?colMeans
lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
ddply(airquality, .(Month), summarise,
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")]
)
ddply(airquality, .(Month), summarise,
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")])
)
ddply(airquality, .(Month), summarise,
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")])
)
library(plyr)
ddply(airquality, .(Month), summarise,
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")])
)
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")], na.rm = T)
ddply(airquality, .(Month), summarise,
cm <- colMeans(airquality[, c("Ozone","Solar.R","Wind")], na.rm = T)
)
ddply(airquality, .(Month), summarise,
var <- c("Ozone","Solar.R","Wind")
mean <- colMeans(airquality[, c("Ozone","Solar.R","Wind")], na.rm = T)
)
ddply(airquality, .(Month), summarise,
var <- c("Ozone","Solar.R","Wind"),
mean <- colMeans(airquality[, c("Ozone","Solar.R","Wind")], na.rm = T)
)
sapply(s, function(x) colMeans(x[, cx("Ozone","Solar.R","Wind")], na.rm = T))
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
ddply(airquality, .(c("Ozone","Solar.R","Wind")), summarise,
var <- c("Ozone","Solar.R","Wind"),
mean <- colMeans(airquality[, c("Ozone","Solar.R","Wind")], na.rm = T)
)
ddply(airquality, .(c("Ozone","Solar.R","Wind")), summarise,
mean <- colMeans(airquality[, c(Month)], na.rm = T)
)
ddply(airquality, .(c("Ozone","Solar.R","Wind")), summarise,
mean <- colMeans(airquality[, Month], na.rm = T)
)
ddply(airquality, .(c("Ozone","Solar.R","Wind")), summarise,
mean <- colMeans(airquality[, 'Month'], na.rm = T)
)
ddply(airquality, .(c("Ozone","Solar.R","Wind")), summarise,
mean <- colMeans(airquality[, c('Month')], na.rm = T)
)
airquality[, c('Month')]
colMeans(airquality[, c('Month')], na.rm = T)
colMean(airquality[, c('Month')], na.rm = T)
colMeans(airquality[, 1], na.rm = T)
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
?gl
f2 <- gl(5,2)
f1 <- gl(2,5)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
list(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2)), drop = T)
str(split(x,list(f1,f2), drop=T))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1),)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 1:4)
noise(5,1,2)
noise <- function(n, mean, sd) {rnorm(n, mean, sd)}
noise(5,1,2)
set.seed(1)
noise <- function(n, mean, sd) {rnorm(n, mean, sd)}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 2:6, 1:5, 2)
mapply(noise, 56, 1:5, 2)
mapply(noise, 5, 1:5, 2)
mapply(noise, 5, 1:5, 1)
mapply(noise, 5, 1:5, .5)
mean(x)
rm(x)
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
n
n
n
n
n
n
n
n
n
n
options(error = recover)
read.csv("nosuchfile")
2
3
n
dnorm(x, mean = 0, sd = 1, log = F)
dnorm(x, mean = 0, sd = 1, log = F)
x <- rnorm(100)
x
dnorm(x, mean = 0, sd = 1, log = F)
plot(y)
y <- dnorm(x, mean = 0, sd = 1, log = F)
plot(y)
x <- rnorm(100)
y <- dnorm(x, mean = 0, sd = 1, log = F)
plot(y)
x <- 1:100
y <- dnorm(x, mean = 0, sd = 1, log = F)
plot(y)
x <- rnorm(100)
y <- dnorm(x, mean = 0, sd = 1, log = F)
?dnorm
dnorm(x, mean = 0, sd = 1, log = FALSE)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
options(error = stop)
y <- dnorm(c(1,2), mean = 0, sd = 1, log = FALSE)
y
plot(y)
y <- dnorm(c(1,2), mean = 0, sd = 1, log = FALSE)
y <- dnorm(c(.25,.75), mean = 0, sd = 1, log = FALSE)
plot(y)
rnorm(10,20,2)
dnorm(10,20,2)
plot(y)
y <- rnorm(10,20,2)
plot(y)
y <- rnorm(100,20,2)
plot(y)
y <- rnorm(100)
y
plot(y)
summary(y)
y <- rnorm(100,20,2)
summary(y)
rnorm(5)
set.seed(1)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10,2)
rpois(10,20)
ppois(2,2)
ppois(4,2)
ppois(6,2)
x <- rnorm(100)
e <- rnorm(100,0,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
y
summary(y)
plot(x,y)
e
x
set.seed(20)
x <- 1:100
set.seed(20)
x <- 1:100
e <- rnorm(100)
y <- 1.5 - 3 * x + e
summary(y)
plot(x,y)
e
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(20)
x <- 1:100
e <- rnorm(100)
y <- 1.5 - 3 * x + e
summary(y)
plot(x,y)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = T)
x <- rnorm(100)
hist(x)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x,y)
par(las = 2)
plot(x,y)
par(las = 1)
plot(x,y)
par(pch = 16) # point character
par(las = 2) # orientation of the axis labels
plot(x,y)
par(col = red) # color
plot(x,y)
par(col = 'red') # color
plot(x,y)
par(lty = 2) # line type
plot(x,y)
par(lty = 1) # line type
plot(x,y)
par(bg = 'yellow') # background color
plot(x,y)
par(mar = 2)
plot(x,y)
par(mar = 2)
par(mar = 2in)
par(mar = .2)
par(mar = c(.2,.2,.2,.2))
plot(x,y)
par(mar = c(2,2,2,2))
plot(x,y)
par(oma = 1)
par(oma = c(2,2,2,2))
plot(x,y)
lines(x,y)
points(x,y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1,y1, col = 'blue')
?text
text(0,0, "blah blah", cex = .8)
text(0,0, "blah blah", cex = 1.5, col = 'green')
text(0,3, "blah blah", cex = 1.5, col = 'green')
pdf(file = 'testRplot.pdf')
x <- rnorm(100)
hist(x)
dev.off()
hist(x, col = 'green')
pdf(file = 'testRplot2.pdf')
x <- rnorm(100)
hist(x, col = 'green')
dev.off()
x <- rnorm(100)
hist(x, col = 'green')
pdf(file = 'testRplot3.pdf')
dev.off()
?def.copy2pf
?dev.copy2pf
?dev
?dev.copy2pf
dev.copy2pf
?dev.copy2pdf
getwd()
setwd("/Users/williamsurles/Dropbox/Classes/computing_for_data analysis_with_R/explore")
dev.copy2pdf()
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
package ?lattice
library(help-lattice)
library(help - lattice)
library(help - lattice)
library(help-lattice)
help-lattice
help lattice
help lattice
library(helplattice)
library(help-lattice)
lattice
library(help - lattice)
library(help - 'lattice')
library(environmental)
library(lattice)
library(nlme)
library(help - lattice)
library(environmental)
data(environmental)
?environmental
library(help ~ lattice)
library(help = lattice)
head(environmental)
xyplot(ozine ~ radiation, data = environmental)
xyplot(ozone ~ radiation, data = environmental)
xyplot(ozone ~ radiation, data = environmental, main = "Ozone vs. Radiation")
xyplot(ozone ~ temperature, data = environmental)
summary(environmental$temperature)
temp.cut <- equal.count(environmental$temperature, 4)
temp.cut
temp.cut, data = environmental)
xyplot(ozone ~ radiation | temp.cut, data = environmental)
wind.cut <- equal.count(environmental$wind, 4)
wind.cut
xyplot(ozone ~ radiation | temp.cut * wind.cut,
data = environmental,
as.Table = T,
pch = 20,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.loess(x, y)
},
xlab = 'Solar Radiation',
ylab = 'Ozone (ppb)',
main = 'Ozone vs Solar Radiation'
)
splam(~ environmental)
splom(~ environmental)
histogram(~ ozone | wind.cut, data = environmental)
histogram(~ ozone | temp.cut * wind.cut, data = environmental)
str(mpg)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv,
geom = c("point","smooth")
)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, color = drv,
facets = .~drv
)
qplot(displ, hwy, data = mpg,
facets = .~ drv
)
qplot(hwy, data = mpg,
facets = drv~.,
binwidth = 2
)
str(maacs)
data(maacs)
qplot(displ, hwy, data = mpg, color = drv,
geom = c("point","smooth")
)
qplot(displ, hwy, data = mpg, color = drv,
geom = c("point","smooth"),
method = 'lm'
)
ezit
exit
qplot(displ, hwy, data = mpg,
geom = c("point","smooth"),
method = 'lm',
facets = .~drv
)
